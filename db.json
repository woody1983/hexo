{"Asset":{"axurano03bsbt8gh":{"_id":"axurano03bsbt8gh","source":"themes/landscape/source/js/script.js","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/js/script.js","path":"js/script.js"},"rpflep0wflysn9pc":{"_id":"rpflep0wflysn9pc","source":"themes/landscape/source/css/style.styl","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/css/style.styl","path":"css/style.styl"},"3qre8dh4fr4l39a2":{"_id":"3qre8dh4fr4l39a2","source":"themes/landscape/source/css/fonts/FontAwesome.otf","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf"},"bqghsqwkte6a8jfx":{"_id":"bqghsqwkte6a8jfx","source":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot"},"zkzrj7mo3fgl3el1":{"_id":"zkzrj7mo3fgl3el1","source":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg"},"6l9ryl3tciwj9oq7":{"_id":"6l9ryl3tciwj9oq7","source":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf"},"1rawj6wwunabb04b":{"_id":"1rawj6wwunabb04b","source":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff"},"cr5ldf15vhvg7zqg":{"_id":"cr5ldf15vhvg7zqg","source":"themes/landscape/source/css/images/banner.jpg","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg"},"itz2b8g7c4fu74p5":{"_id":"itz2b8g7c4fu74p5","source":"themes/landscape/source/fancybox/blank.gif","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif"},"pyvhyj3dko0m0b98":{"_id":"pyvhyj3dko0m0b98","source":"themes/landscape/source/fancybox/fancybox_loading.gif","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif"},"5nnyzsbzuwgrxmvm":{"_id":"5nnyzsbzuwgrxmvm","source":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif"},"40pvfoq33fybznks":{"_id":"40pvfoq33fybznks","source":"themes/landscape/source/fancybox/fancybox_overlay.png","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png"},"bih2pya35oxmerov":{"_id":"bih2pya35oxmerov","source":"themes/landscape/source/fancybox/fancybox_sprite.png","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png"},"78j7le1qew08rjrp":{"_id":"78j7le1qew08rjrp","source":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png"},"fvyrageghan6ylq4":{"_id":"fvyrageghan6ylq4","source":"themes/landscape/source/fancybox/jquery.fancybox.css","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css"},"c1bytbmfydc76x5v":{"_id":"c1bytbmfydc76x5v","source":"themes/landscape/source/fancybox/jquery.fancybox.js","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js"},"kguo7uafyx927m6v":{"_id":"kguo7uafyx927m6v","source":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js"},"6b4mhtkqjuvzmzyc":{"_id":"6b4mhtkqjuvzmzyc","source":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png"},"owok3psrlvj3jdrf":{"_id":"owok3psrlvj3jdrf","source":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css"},"kkxam3bxe695o5qr":{"_id":"kkxam3bxe695o5qr","source":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js"},"trn6xd4zjb2mpedu":{"_id":"trn6xd4zjb2mpedu","source":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js"},"c8wr3z7t7rdxcpdc":{"_id":"c8wr3z7t7rdxcpdc","source":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css"},"mejw9gdlrvyotjro":{"_id":"mejw9gdlrvyotjro","source":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1389063125000,"modified":false,"full_source":"/usr/local/hexo/blog/themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js"},"2ryg66o47sqtnweh":{"_id":"2ryg66o47sqtnweh","source":"source/favicon.ico","mtime":1389249019000,"modified":false,"full_source":"/usr/local/hexo/blog/source/favicon.ico","path":"favicon.ico"},"vkor7wycrt4wxnk4":{"_id":"vkor7wycrt4wxnk4","source":"source/favicon_data.ico.ico","mtime":1389249019000,"modified":false,"full_source":"/usr/local/hexo/blog/source/favicon_data.ico.ico","path":"favicon_data.ico.ico"},"2nn3fddv6cvsjcny":{"_id":"2nn3fddv6cvsjcny","source":"source/my_favicon.ico","mtime":1389249476000,"modified":false,"full_source":"/usr/local/hexo/blog/source/my_favicon.ico","path":"my_favicon.ico"}},"Cache":{"yxi55e2wfyo1hx7j":{"_id":"yxi55e2wfyo1hx7j","content":"title: Hello New World\ndate: 2014-01-07 10:52:05\ntags: Talks\n---\n\n## Another blog. I wish it's be ok.\n\nWelcome to [Hexo](http://zespia.tw/hexo)! This is your very first post. Check [documentation](http://zespia.tw/hexo/docs) to learn how to use.\n\n\n>I put my heart and my soul into my work, and have lost my mind in the process.  Vincent Van Gogh\n","mtime":1389064178000,"source":"_posts/hello-world.md"},"nkgyrjb7uixy8ivj":{"_id":"nkgyrjb7uixy8ivj","content":"title: Hump day Note  {Block|Scope|Proc}\ndate: 2013-09-26 00:03\ncategories: Ruby\ntags: Ruby\n---\n\n### Basice\n\n``` ruby\ndef m_method(a,b)\n  a + yield(a,b)\nend \n\nm_method(1,2) {|x,y| (x+y)*3} \n```\n\n#### When you run m_method ,then yield is should be excute, and include {_code_}\n\n### Closures\n\n> 这句话蛮好 : 代码要想运行 需要执行环境   局部变量 全局变量 self 等  但Block中 既有代码又有绑定 可以立即运行\n创建Block的时候 Block会自动获取局部的绑定 作用域class def module中的除外。\n\n一个方法中已经绑定了一个x变量 但调用Block的时候获取了def以外的一个名字也叫x的绑定 并用在自己的Block中 运行该方法时 回调Block的时候会将这个x的绑定直接带进原方法中 \n\n#### 另外就算原方法中已经绑定了x变量 如果Block没有获取到x的时候 直接运行该方法 会报错说找不到x \n\n``` ruby\n   def my_method \n..   x=\"Hello\" \n..   yield(\"woody\") \n..   end\n=> nil\n   my_method{|y| \"#{x}, #{y} world\" }\n(eval):3: undefined local variable or method `x' for main:Object (NameError)\n\tfrom (eval):2:in `my_method'\n\tfrom (eval):3\n\n   x = \"Hi\"\n=> \"Hi\"\n   my_method{|y| \"#{x}, #{y} world\" }\n=> \"Hi, woody world\"\n```\n<!-- more -->\n\n### Scope Gate\n\n#### 全局变量 $开头 任何作用域都可以访问！但是你依然可以用  顶级实例变量@ 来替代全局变量\n\n``` ruby \n   @var = \"the top-level @var\"\n=> \"the top-level @var\"\n   def my_method \n..   @var \n..   end\n=> nil\n   my_method\n=> \"the top-level @var\"\n```\n#### 顶级实例变量比全局变量要安全一些\n\n### 扁平化Scope\n\n#### class/def/module 之间有一个小小的区别 Class和Module中的Code会被立即执行  def要等到调用的时候才会被执行\n\n``` ruby \n   class Test_my_class \n..   puts \"111\" \n..   end\n111\n=> nil\n   module Test_my_module \n..   puts \"Module\" \n..   end\nModule\n=> nil\n   def Test_my_method \n..   puts \"Method\" \n..   end\n=> nil\n```\n\n### 穿越作用域\n\n#### 要让局部变量穿越 class Myclass这个Scope Gate \n\n``` ruby\nvar = 'scope'\nMyclass = Class.new do\n  puts \"#{var} is here!\"\n  define_method :my_method do\n     puts \"#{var} in the def here!\"\n  end\nend\nscope is here!\n=> Myclass\n \n\nMy_module = Module.new do\n  puts \"#{var}\"\nend\n```\n\n* 想要让一组方法之间共享一个变量 而屏蔽掉方法对其的访问就用扁平化的方法\n* 将局部变量传给对象内的实例变量---打破封装---直接修改实例变量---能接受的理由就是测试\n* 创建一个对象 仅仅是为了用instance_eval来执行Block 这叫做Clean room\n","mtime":1389076874000,"source":"_posts/2013-09-26-ruby-proc.markdown"},"sv0cnnpzhazg3mho":{"_id":"sv0cnnpzhazg3mho","content":"title: Linux Install MySQL5.5\ndate: 2014-01-07 14:15:49\ntags: MySQL\ncategories: MySQL\n---\n\n## First, Install Cmake\n\n```\n$tar zxf cmake-2.6.4.tar.gz\n$cd cmake-2.6.4\n$./bootstrap\n$make\n$sudo make install\n```\n## Make MySQL\n\n* [CMake](http://www.cmake.org/)\n* [CMake How to Install](http://www.cmake.org/cmake/help/install.html)\n\n<!-- more -->\n\n```\ntar zxf mysql-5.5.11.tar.g\ncd mysql-5.5.11\nCFLAGS=\"-O3\" CXX=gcc\nCXXFLAGS=\"-O3 -felide-constructors -fno-exceptions -fno-rtti\"\ncmake . -LH|more \ncmake . -DCMAKE_INSTALL_PREFIX=/home/mysql/mysql -DEXTRA_CHARSETS=all\nmake -j 8 \nmake install\n```\n\n## Step by step\n\n```\ngroupadd dba\nuseradd -g dba mysql\ncp mysql-5.5.11.tar.gz /home/mysql/\nchown -R mysql:dba /home/mysql/mysql-5.5.11.tar.gz\n\n```\n\n```\nsu - mysql\ntar zxf mysql-5.5.11.tar.gz\ncd mysql-5.5.11\nCFLAGS=\"-O3\" CXX=gcc \nCXXFLAGS=\"-O3 -felide-constructors -fno-exceptions -fno-rtti\"\ncmake . -LH|more        \ncmake . -DCMAKE_INSTALL_PREFIX=/home/mysql/mysql -DEXTRA_CHARSETS=all\nmake -j 8 && make install   \n```\n\n### my.cnf\n\n```\ncd /home/mysql/mysql\nsu - root\ncp mysql/share/mysql/my-medium.cnf /etc/my.cnf\nchown -R mysql:dba /etc/my.cnf\n\nsu - mysql\nvi /etc/my.cnf\nbasedir = /home/mysql/mysql\ndatadir = /home/mysql/mysql/data\nsocket = /home/mysql/mysql/run/mysql.sock\nlog-error = /home/mysql/mysql/log/alert.log\nlog_slow_queries = /home/mysql/mysql/log/slow.log\n```\n\n\n### Start MySQL\n\n```\n./scripts/mysql_install_db --basedir=/home/mysql/mysql  \\\n--datadir=/home/mysql/mysql/data --user=mysql --force\n\n./bin/mysqld_safe &\n```\n\n[Via original](http://www.orczhou.com/index.php/2011/06/compile-and-install-mysql-5-5-from-source/)\n","mtime":1389076916000,"source":"_posts/linux-install-mysql55.md"},"zdc1s53vqrcjtd1d":{"_id":"zdc1s53vqrcjtd1d","content":"title: \"Ruby Alias around\"\ndate: 2013-09-25 23:51\ntag: Ruby\n---\n\n## 关于环绕别名 实际用途还是蛮多的\n\n``` ruby \nclass Myclass\n  def greet\n    puts \"Hello!\"\n  end\n\n  def greet_with_log\n    puts \">>>\"\n    greet_without_log #在这里调用的时候 其实是调用的是greet这个方法\n    puts \"<<<\"\n  end\n\n  alias_method :greet_without_log, :greet\n  alias_method :greet, :greet_with_log #再把含有Log输出的重新别名给greet这个方法\n\nend\n\nMyclass.new.greet_with_log\n```\n","mtime":1389076359000,"source":"_posts/ruby-alias-around.markdown"},"vmudfuraf874smpa":{"_id":"vmudfuraf874smpa","content":"title: \"Ruby Refactoring\"\ndate: 2013-09-25 23:48\ntag: Ruby\n---\n\n这堆神似的函数 越看越不爽 明天用method_missing重构\n\n``` ruby\nrequire 'yaml'\n\nclass Datasource\n  \n  def initialize()\n    @dw = YAML.load(File.open('info_price.yml')) \n  end\n\n  def get_cpu_info(computer_id)\n    @dw[computer_id][\"cpu_info\"]\n  end\n\n  def get_cpu_price(computer_id)\n    @dw[computer_id][\"cpu_price\"]\n  end\n\n  def get_mouse_info(computer_id)\n    @dw[computer_id][\"mouse_info\"]\n  end\n\n  def get_mouse_price(computer_id)\n    @dw[computer_id][\"mouse_price\"]\n  end\n\n  def get_memory_info(computer_id)\n    @dw[computer_id][\"memory_info\"]\n  end\n\n  def get_memory_price(computer_id)\n    @dw[computer_id][\"memory_price\"]\n  end\nend\n\n\n#-- Debug --#\n=begin\nds = Datasource.new\nputs ds.get_cpu_info(10001)\nputs ds.get_cpu_price(10002)\n=end\n```\n<!-- more -->\n### 参考\n\n``` ruby\nclass Computer\n\n  instance_methods.each do |m|\n    undef_method m unless m.to_s =~ /^__|method_missing|respond_to?|object_id/\n  end\n\n  def initialize(data_source)\n    #@pc_id = computer_id\n    @data_source = data_source\n  end\n\n  def method_missing(name, *args)\n      super if !respond_to?(name)\n      #puts \">>> #{name}, args: #{args}, args class: #{args.class} and size: #{args.size}\"\n      \n      args.inject(0) do |result,pc_id|\n      \tinfo = @data_source.send \"get_#{name}_info\", pc_id\n      \tprice = @data_source.send \"get_#{name}_price\", pc_id\n      \tresult = \"#{name.capitalize}: #{info}, ($#{price})\"\n      \tresult = \"* #{result}\" if price > 1700\n        puts result\n      end\n  end\n\n  def respond_to?(method)\n    @data_source.respond_to?(\"get_#{method}_info\") || super\n  end\n\nend\n```\n","mtime":1389076469000,"source":"_posts/refactoring.markdown"},"xnj8sc4s78p6fjuq":{"_id":"xnj8sc4s78p6fjuq","content":"title: \"eigenclass with Module\"\ndate: 2013-09-25 23:23\ncategories: Ruby\ntag: Ruby\n---\n\n我用了一个很笨的方法才把这个搞明白 那就是... \n\n# Module的eigenclass 不会被任何事物继承  绝对封闭！\n\n`元编程#129Pages#Quiz`\n\n### 例子弄错了~在线编辑器害死人  凸\n\n``` ruby \nmodule MyModule \n  def my_method; 'hello';end\nend\n\nclass Myclass \n  include MyModule\nend\n\nirb(main):004:0> MyModule.my_method\n#NoMethodError: undefined method `my_method' for MyModule:Module\nirb(main):010:0> puts Myclass.my_method\n#NoMethodError: undefined method `my_method' for Myclass:Class\nirb(main):011:0> obj = Myclass.new\n#=> #<Myclass:0x861fa78>\nirb(main):012:0> puts obj.my_method\n#hello\n#=> nil\n```\n\n在Module中定义一个普通的实例方法 Myclass Include该Module 只有Myclass的实例obj可以调用\n也就是说`my_method`一直作为实例方法在ancestors中流窜\n\n<!-- more -->\n\n``` ruby\nmodule MyModule \n\tdef self.my_method; 'hello';end\nend\n\nclass Myclass\n  include MyModule\nend\n\nirb(main):007:0> MyModule.my_method\n#=> \"hello\"\nirb(main):008:0> Myclass.my_method\n#NoMethodError: undefined method `my_method' for Myclass:Class\nirb(main):009:0> obj = Myclass.new\n#=> #<Myclass:0x8627980>\nirb(main):010:0> obj.my_method\n#NoMethodError: undefined method `my_method' for #<Myclass:0x8627980>\n```\n\n第二次  将Module中的方法改成是了实例方法  结果正常 只有MyModule可以正常调用  但Myclass并没有继承到\n难道在Myclass的eigenclass中并没有得到这个继承？\n\n``` ruby\nmodule MyModule \n  def my_method; 'hello';end\nend\n\nclass Myclass \n  class << self\n\tinclude MyModule\n  end\nend\n\nirb(main):009:0> MyModule.my_method\n#NoMethodError: undefined method `my_method' for MyModule:Module\nirb(main):010:0> Myclass.my_method\n#=> \"hello\"\nirb(main):011:0> obj = Myclass.new\n#=> #<Myclass:0x8627570>\nirb(main):012:0> obj.my_method\n#NoMethodError: undefined method `my_method' for #<Myclass:0x8627570>\n```\n\n第三次和第一次的修改差异在 将MyModule植入到 Myclass的eigenclass中了~ Myclass可以正常调用该类方法\n### 可是作为 Myclass的实例对象obj却不能调用这个my_method了\n\n``` ruby\nmodule MyModule \n\tdef self.my_method; 'hello';end\nend\n\nclass Myclass \n  class << self\n\tinclude MyModule\n  end\nend\n\nirb(main):009:0> MyModule.my_method\n#=> \"hello\"\nirb(main):010:0> Myclass.my_method\n#NoMethodError: undefined method `my_method' for Myclass:Class\nirb(main):011:0> obj = Myclass.new\n#=> #<Myclass:0x862bfa8>\nirb(main):012:0> puts obj.my_method\n#NoMethodError: undefined method `my_method' for #<Myclass:0x862bfa8>\n\n# my_method就算变成Module的类方法以后 还是被继承下来了 和普通的Include看起来效果好像是一样的\n```\n\n第四次和第二次 得到的结果是一样的 也就是进没进Myclass的eigenclass都一样~ \n\n我把第四部分重写了一下 加入了另一个实例方法在Module中\n\n``` ruby \nmodule MyModule\n  def self.my_method; 'hello';end\n  def mine_method; 'another method'; end\nend\n\nclass Myclass\n  class << self\n    include MyModule\n  end\nend\n\nirb(main):012:0* Myclass.mine_method\n#=> \"another method\"\nirb(main):013:0> Myclass.my_method\n#NoMethodError: undefined method `my_method' for Myclass:Class\n\n```\n\n看来`class << self`这种方法只能把MyModule中的实例方法植入到Myclass的eigenclass中 类方法不行\n\n## 难道下面这么做是让 MyModule仅仅植入到 Myclass的eigenclass中 而在Myclass中是不可见的？\n\n``` ruby \nclass Myclass \n  class << self\n    include MyModule\n  end\nend\n```\n","mtime":1389076780000,"source":"_posts/eigenclass-with-module.markdown"},"e7npxl7ugh38pprx":{"_id":"e7npxl7ugh38pprx","content":"title: \"Ruby Block & Proc\"\ndate: 2013-09-25 23:19\ncategories: Ruby\ntag: Ruby\n---\n\n\n\n``` ruby\ndef math(a,b)\n    yield(a,b)\nend\n#math写成这样子 不跟block是会报错的 因为功能单一 也没必要加上 block_given?\n\ndef teach_math(a,b,&opertion)\n    puts math(a,b,&opertion)\nend\n\n#opertion加上&意思就是 opertion是个Proc对象 但我当Block来用\n\nteach_math(2,3) {|x,y| x * y } \n#调用的时候2和3会当作参数穿给a和b两个变量 后面挂着的Block会传给opertion对象\n```\n\n<!-- more -->\n\n``` ruby\n# 稍微修改一下就看出对比了\n#因为math定义了一个yield 所以就必须有一个block挂上去一起玩或者把一个Proc当做block来挂着玩\n#懂？\n\n\n# 这么写的话  opertion_again就必须是一个proc的对象 使用其自身的call方法来回调\ndef math(a,b,opertion_again)\n    opertion_again.call(a,b)\nend\n\ndef teach_math(a, b, &opertion)\n    puts math(a,b,opertion)#在这里就传进去一个proc对象而不是一个当做block的proc\nend\n\nteach_math(2,3) { |x,y| x * y } \n\n#-------------------Block--->Proc-------------------------------------- \ndef my_method(&the_proc)\n    the_proc #去掉了&就变成了一个普通的proc对象并返回出去！\nend\n\ncmp = my_method {|name| \"Hello,#{name}!\"}#cmp其实是me_method的返回值就是一个proc对象\n#所以要call回调\ncmp.call(\"Johnny\")\n\n#-------------------Proc--->Block-------------------------------------- \n\ndef my_method(greeting)\n    puts \"#{greeting},#{yield}\"#看到yield了就意味着这个方法调用的时候需要跟一个block\nend\n\nmy_proc = proc { \"Woody\" } #声明一个proc对象\n\nmy_method(\"Hello\",&my_proc)#把Proc当Block ！again!\n    \n```\n\n``` ruby\ndef me_method()\n  yield\nend\n# puts my_method { \"xXx\" }   => \"xXx\"\n\ndef me_method2(&my_proc)\n  my_proc.call\nend\n#me_method2 { \"xXx\" }   => \"xXx\"\n\n#当你会把Block和Proc串起来玩的时候  可调用对象的概念应该了解的差不多了\n\ndef me_method()\n  yield\nend\n\ndef me_method2(&my_proc)\n  me_method(&my_proc)\nend\n\nme_method2 { \"_why\" } # => \"_why\"\n```\n\n> 这两个方法在调用的时候都需要跟一个block\n\n### 大招\n\n``` ruby \n[\"1\", \"2\", \"3\"].map(&:to_i)\n#其效果和下面这个一样\n[\"1\", \"2\", \"3\"].map {|i| i.to_i }\n```\n> Reg Braithwaite简单地介绍了to_proc是怎样让 (1..100).inject(&:+) 这样的代码工作的:\n\n\n& 操作符用来把Proc对象转化成块，或者把块转化成Proc对象。这此例中，它试图把符号 :+ 转换成一个块。此转换过程使用了Ruby内建的强制机制。这个机制会检查我们是否有一个Proc对象。如果没有，它就把#to_proc方法传递到参数中 来生成一个Proc。如果符号 :+ 有#to_proc方法，就调用它。在Ruby 1.9中，它就有一个#to_proc方法。此方法使用了第一个参数，然后返回一个Proc，并把 + 方法和其他参数传递给它。\n由此可见，&:+ 实际上就是 { |x, y| x + y }\n\n\n``` ruby \n(1..5).map(&:to_s) \n#=> [\"1\", \"2\", \"3\", \"4\", \"5\"]\n(1..5).map{|x| x.to_s }\n#=> [\"1\", \"2\", \"3\", \"4\", \"5\"]\n\n [\"woody\",\"johnny\"].map(&:capitalize) \n#=> [\"Woody\", \"Johnny\"]\n```\n\n### 另一种可调用对象的方法  .method\n\n``` ruby \nclass MyClass\n    def initialize(value)\n        @name = value\n    end\n    \n    def my_method\n        @name.capitalize\n    end\nend\n    \nobject = MyClass.new(\"woody\")\ncmp = object.method :my_method\ncmp.class #=> Method\ncmp.call #=> \"Woody\"\n#String.instance_methods\n```\n\n### instance_eval \n`object#instance_eval` 可以在对象的上下文中执行一个Block\n\n``` ruby\n@setups = []\n# 初始化\ndef setup(&block)\n  @setups << block\nend\n\nsetup do\n  puts \"[\\033[1;36;40m Setting up \\033[m] [\\033[1;37;40m Sky \\033[m]\"\n  @sky_height = 100\nend\n\nsetup do\n  puts \"[\\033[1;36;40m Setting up \\033[m] [\\033[1;37;40m Mountains \\033[m]\"\n  @mountains_height = 200\nend\n\n @setups.each {|setup| env.instance_eval &setup }\n```\n\n\n","mtime":1389076995000,"source":"_posts/ruby-block-proc.markdown"},"l03lt9qbarxo2jeu":{"_id":"l03lt9qbarxo2jeu","content":"title: \"Ruby On Kettle\"\ndate: 2013/09/09 22:34\ncategories: Ruby\ntags: [Ruby ,Kettle]\n---\n\n``` ruby\n1.9.3-p194 :009 > \"1111111111\".to_i(2)\n => 1023 \n1.9.3-p194 :010 > 1023.to_s(2)\n => \"1111111111\" \n```\n\n总要为Kettle做点什么 用二进制来完成一对多线路分发 监控就成了主要的问题。\n\n``` ruby\n1.9.3-p194 :013 > \"1111111111\".size\n => 10 \n1.9.3-p194 :014 > \"1111111111\".length\n => 10 \n```\n\n#### 10位对应10个分发线路\n\n一个最常见的问题 我需要充值某条数据的某个线路重新发送 或者紧急止停某条线路的一批数据下发，so 要定位\n\n``` ruby\n1.9.3-p194 :016 > \"1111111111\".split('')\n => [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"] \n```\n\n#### 重置Reset 0号线路 也就是Array最右边那个 \n\n``` ruby \n1.9.3-p194 :021 > rok = \"1111111111\".split('')\n => [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"] \n1.9.3-p194 :022 > rok\n => [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"] \n1.9.3-p194 :023 > rok[10-1]\n => \"1\" \n1.9.3-p194 :024 > rok[10-1] = \"0\"\n => \"0\" \n1.9.3-p194 :025 > rok\n => [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"0\"] \n```\n\n`明天抽时间写一个Class 封装这个动作`\n\n### 我想要的功能应该有 \n\n* Preview Kettle当前运行状况和`质量`\n* 单独查看某个线路或某张表的下发情况 `时间` & `Error` & `Count`\n* Error 单独分析和Email寄送功能\n* Reset 下发Status\n","mtime":1389078081000,"source":"_posts/ruby-on-kettle.markdown"},"2tum6ij6g5re2mnx":{"_id":"2tum6ij6g5re2mnx","content":"title: \"Ruby inject\"\ndate: 2013-09-08 23:26\ncategories: Ruby\ntags: Ruby\n---\n\n很早之前再Ruby China问的一个问题 就是1到10 可以创建多少个3位数不重复的组合\n\n现在有了答案!\n\n``` ruby\n(1..10).to_a.combination(3).to_a\n```\n\n说实话 这个函数我也没见过 但效果还不错 目测了一把基本是我要的，和数据打交道时间久了就总觉得号码是有规律可言的。上周研习了一下`inject`的用法 感觉可以做一点小东西出来玩一下。\n\n大乐透的前五位数有多少种组合呢？ 呵呵 \n\n``` ruby\n(1..35).to_a.combination(5).to_a\n```\n","mtime":1389078253000,"source":"_posts/ruby-inject.markdown"},"bq464njk49wg5jql":{"_id":"bq464njk49wg5jql","content":"title: \"heroku\"\ndate: 2013-09-05 21:20\ntags: [Deploy, Heroku]\n---\n\n一开始是在 [Coursera](https://class.coursera.org/startup-001/class/index)上的公开课学到的 留个记录 以后会天天用到的。\n\n###安装命令很简单 Gem包\n\n`gem install heroku`\n\n`$ heroku keys` 可以查看目前主机中存有的key 如果没有你当前主机的话 就用`heroku keys:add`\n\nHeroku只是一个托管平台而已 Code还是要保存在Github上 需要部署的时候部署过去。我还真不知道怎么从Heroku直接拖Code下来。\n\n```\n$ heroku create semisconblog\nCreating semisconblog... done, stack is cedar\nhttp://semisconblog.herokuapp.com/ | git@heroku.com:semisconblog.git\nGit remote heroku added\n```\n回头再写 Heroku还是有点不熟悉\n\n\n","mtime":1389078417000,"source":"_posts/heroku.markdown"},"y2t8s28adug36paz":{"_id":"y2t8s28adug36paz","content":"title: \"Ruby-Bits\"\ndate: 2013-09-05 22:10\ncategories: Ruby\ntags: Ruby\n---\n\n关于Ruby最佳实践的记录，我几乎已经放弃向周围的人推荐Ruby这门让人开心的语言了，原因其实很奇怪。\n\n关于参数，Ruby的Function中定义的函数或类总是会接收很多参数 不接受参数的Function不觉得很奇葩吗？\n\n传统的语法和实践是\n\n``` ruby\ndef CHR(username,login_id,message)\n #...\nend\n```\n\n这个不能说错 但按照CodeSchool老师的原话来说`Location isn't always used, so let's add default.`\n\n``` ruby\ndef CHR(username,login_id=nil,message=nil)\n #...\nend\n```\n\n还有一种情况就是参数过多，以致于让function变得毫无可读性`have to keep placeholders for arguments you’re not using`\n这个时候可以采用 `HASH Arguments`\n\n``` ruby\n\ndef tweet(message, options = {})\n  status = Status.new\n  status.lat = options[:lat]\n  status.long = options[:long]\n  status.body = message\n  status.reply_id = options[:reply_id]\n  status.post\nend\n```\n\n调用的时候 就可以利用Symbol来实现多参数。\n\n``` ruby\n￼tweet(\"Practicing Ruby-Fu!\",\n  :lat => 28.55,\n  :long => -81.33,\n  :reply_id => 227946\n￼￼)\n```\n\n<!-- more -->\n\n###Using Ruby 1.9 hash syntax\n\n``` ruby\ntweet(\"Practicing Ruby-Fu!\", \n    lat: 28.55,\n    long: -81.33, \n    reply_id: 227946\n)\n```\n\n参数的顺序也无所谓了 \n\n``` ruby\n￼tweet(\"Practicing Ruby-Fu!\",\n  reply_id: 227946,\n  lat: 28.55,\n  long: -81.33\n)\n```\n\n一个参数也ok\n\n``` ruby \ntweet(\"Practicing Ruby-Fu!\")\n```\n\n``` ruby \ndef new_game(name, options={})\n  {\n    name: name,\n    year: options[:year],\n    system: options[:system]\n  }\nend\ngame = new_game(\"Street Figher II\", year: 1992, system: \"SNES\")\n```\n\n###EXCEPTIONS\n\n关于判断例外EXCEPTIONS的问题 最传统的写法就是先做判断 有值就出来 如果没值的话 就抛除个神器的东西。貌似这么写程序不太好。\n\n``` ruby\ndef get_tweets(list)\n  if list.authorized?(@user)\n    list.tweets #如果这个user是验证成功的就把他的tweet列出来\nelse\n    end[] #“magic” return value\nend\n```\n\n如果没有tweet 查出来是空的话  还要报一个Error 貌似在Ruby里没这个必要。\n\n``` ruby \ntweets = get_tweets(my_list)\nif tweets.empty?\n  alert \"No tweets were found!\" + \n  \"Are you authorized to access this list?\"\nend\n```\n\n最佳方法应该是用unless先对`@user`这个对象进行判断 如果没有就用`raise`来抛除一个异常并返回登陆.\n\n``` ruby \n￼def get_tweets(list)\n  unless list.authorized?(@user)\n    raise AuthorizationException.new\n  end\nlist.tweets\nend\n\nbegin\n  tweets = get_tweets(my_list)\nrescue AuthorizationException\n  warn \"You are not authorized to access this list.\"\nend\n```\n\n练习\n\n``` ruby \nclass InvalidGameError < StandardError; end\ndef new_game(name, options={})\n  {\n    name: name,\n    year: options[:year],\n    system: options[:system]\n  }\nend\nbegin\n  game = new_game(nil)\nrescue InvalidGameError => e\n  puts \"There was a problem creating your new game: #{e.message}\"\nend\n```\nWe want to make sure that each game is a valid game object - in this case a simple hash of values. Even still, we wouldn't want to return a hash with a nil name. Raise an InvalidGameError error in the new_game method if name is nil.\n\n``` ruby\nclass InvalidGameError < StandardError; end\ndef new_game(name, options={})\n\traise InvalidGameError, \"You must provide a name for this game.\" unless name\n  {\n    name: name,\n    year: options[:year],\n    system: options[:system]\n  }\nend\nbegin\n  game = new_game(nil)\nrescue InvalidGameError => e\n  puts \"There was a problem creating your new game: #{e.message}\"\nend\n```\n\n###splat arguments\n\n说实话 我没觉得这个比hash那个要实用\n\n``` ruby\n￼def mention(status, *names)\n  tweet(\"#{names.join(' ')} #{status}\")\nend\n\nmention('Your courses rocked!', 'eallam', 'greggpollack', 'jasonvanlue')\n\ndef describe_favorites(*games)\n  for game in games\n    puts \"Favorite Game: #{game}\"\n  end  \nend\ndescribe_favorites('Mario', 'Contra', 'Metroid')\n```\n\n为一个二维Array创建一个Class\n\n``` ruby \n￼user_names = [\n  [\"Ashton\", \"Kutcher\"],\n  [\"Wil\", \"Wheaton\"],\n  [\"Madonna\"]\n]\n\nuser_names.each { |n| puts \"#{n[1]}, #{n[0]}\" }\n```\n\n这个要直接打印出来 最后那个就会多一个分隔符。\n\n``` ruby\nclass Name\n  def initialize(first, last = nil)\n    @first = first\n    @last = last\n  end\n \n￼￼def format\n    [@last, @first].compact.join(', ')\n  end \nend\n```\n\n","mtime":1389078356000,"source":"_posts/ruby-bits.markdown"},"uo88mzpcm3veu57y":{"_id":"uo88mzpcm3veu57y","content":"title: \"About Blocks With Objective-C\"\ndate: 2013-08-15 11:38\ncategories: IOS\ntags: [IOS, Objective-C]\n---\n\n#### 一般的做法\n``` objective-c\nif(someBOOLVariable){\n    NSLog(@\"Hello from inside the if statement\");\n}//如果someBOOLVariable是YES {}里的代码将会被执行\n``` \n\n其实我们想的是能够括号里的代码能够脱离任何特定功能 比如触发条件\nBlocks是一组代码 意味着 他可以被传递到方法或像NSArray或NSDictionary中集合\n\n #### ^ {}块可以创建\n``` objective-c\n^{\n    NSLog(@\"Hello from inside the block\");\n};\n\n^LogMessage = ^ {\n    NSLog(@“你好块里面的”);\n};\n``` \n<!-- more -->\n###如果不想其返回任何值 就加一个void\n``` objective-c\nvoid ^logMessage = ^{\n    NSLog(@\"Hello from inside the block\");\n};\n``` \n##练习- 创建一个块  不接受和不返回任何信息\n``` objective-c\nvoid (^myFirstBlock)(void) = ^{\n    NSLog(@\"Hello from inside the block\");\n};\n\nmyFirstBlock();\n``` \n##Blocks with arguments\n``` objective-c\n^(NSUInteger num1, NSUInteger num2){\n    NSLog(@\"The sum of the numbers is %lu\", num1 + num2);\n};\n\nvoid (^sumNumbers)(NSUInteger, NSUInteger) = ^(NSUInteger num1, NSUInteger num2){\n    NSLog(@\"The sum of the numbers is %lu\", num1 + num2);\n};\n\n/*\n sumNumbers(45, 89);\n sumNumbers(18, 56);\n */\n\nvoid (^logCount)(NSArray *) = ^(NSArray *array){\n    NSLog(@\"There are %lu objects in this array\", [array count]);\n};\n\nlogCount(@[@\"Mr.\", @\"Higgie\"]);\nlogCount(@[@\"Mr.\", @\"Jony\", @\"Ive\", @\"Higgie\"]);\n/*\n challenge[2]: There are 2 objects in this array\n challenge[2]: There are 4 objects in this array\n */\n``` \n###练习 \n``` objective-c\nvoid (^myFirstBlock)(NSString *) = ^(NSString *str1){\n    NSLog(@\"%@ from inside the block\",str1);\n};\n\nmyFirstBlock(@\"Hello\");\nmyFirstBlock(@\"World\");\n``` \n\n## Enumerate with blocks\n 绝大多数的时候，你会不会块分配给一个变量，调用它自己。相反，你会传递一个块作为参数的消息，像`enumerateObjectsUsingBlock：NSArray`的消息。\n \n `enumerateObjectsUsingBlock：`可以用来作为快速枚举的替代品，因为它基本上是同样的事情：执行一个代码块，在一个数组中的每个对象。但是，而不是使用特殊的语法，它使用正常短信的发送和块。\n \n\n``` objective-c\nNSArray *newHats = @[@\"Cowboy\", @\"Conductor\", @\"Baseball\",\n@\"Beanie\", @\"Beret\", @\"Fez\"];\n\nfor (NSString *hat in newHats) {\n    NSLog(@\"Trying on hat %@\", hat);\n}\n\n\n\nvoid (^enumeratingBlock)(NSString *, NSUInteger, BOOL *) =\n^(NSString *word, NSUInteger index, BOOL *stop){\n    NSLog(@\"%@ is a funny word\", word);\n};\n\n[funnyWords enumerateObjectsUsingBlock:enumeratingBlock];\n\n\n\nNSArray *newHats = @[@\"Cowboy\", @\"Conductor\", @\"Baseball\",\n@\"Beanie\", @\"Beret\", @\"Fez\"];\nvoid (^enumeratingBlock)(NSString *, NSUInteger, BOOL *) =\n^(NSString *hat, NSUInteger index, BOOL *stop){\n    NSLog(@\"%@ is a funny word\", hat);\n};\n\n[newHats enumerateObjectsUsingBlock:enumeratingBlock];\n```  \n","mtime":1389078529000,"source":"_posts/about-blocks-with-objective-c.markdown"},"8wcni70kcclby8lg":{"_id":"8wcni70kcclby8lg","content":"title: \"LM35使用笔记\"\ndate: 2013-06-08 23:25\ncategories: Arduino\ntags: Arduino\n---\n\n``` c\n/*\n使用LM35来测量室内温度\n\n留意float类型的计算和温度换算公式\n*/\n\nvoid setup() {\n \n  Serial.begin(9600);\n}\n \nvoid loop() {\n \n  int n = analogRead(A0);    //读取A0口的电压值\n \n  float vol = (n/1024.0) * 5.0;   //使用浮点数存储温度数据，温度数据由电压值换算得到\n  float T = vol*100; \n \n  Serial.print(\"analogRead A0: \");\n  Serial.print(n);\n   \n  Serial.print(\" Volatge: \");\n  Serial.print(vol);\n  \n  Serial.print(\" Temperature: \");\n  Serial.println(T);                   //串口输出温度数据\n  delay(2000);                           //等待2秒，控制刷新速度\n\n}\n```\n\n###Analog convert Voltage\nLM35换算公式简化掉 Analog数值*(5/1024) 即可 5 voltage 1024 analog\n\n\n![](http://25.media.tumblr.com/d0f801f032d35b3ff84a0df6c6c2cb63/tumblr_mnbaw9lKc31sst44io1_400.jpg)\n![](http://25.media.tumblr.com/0dae8653daf7cb673d7956f3ecc5ef20/tumblr_mnb63bt0J11sst44io1_400.jpg)\n\n```\nLM35 Temperature Sensor\n和TMP36不太一样 LM35没有默认电流 在没有温度的时候 输出电压是0mv\n\n对比关系还是5v对应analog的1023\n\n1023的analog数值转换成voltage = analog/1024 * 5\n\n1摄氏度 = 10mv so voltage转温度也比较容易一些\n\nopen a serial connection to display values Serial.begin(9600);\n```\n","mtime":1389078879000,"source":"_posts/lm35.markdown"},"kgyfhaspadxm3b39":{"_id":"kgyfhaspadxm3b39","content":"title: \"关于HC-SR04 超声波传感器\"\ndate: 2013-05-27 00:21\ncategories: Arduino\ntags: Arduino\n---\n\n关于HC-SR04 超声波传感器\n\n淘宝上面最便宜的SRF-04超声波传感器，有四个脚：5v电源脚（Vcc），触发控制端（Trig），接收端（Echo），地端（GND） 我的是HC-SR04\n\n模块工作原理：\n\n1.采用IO触发测距，给至少10us的高电平信号；\n2.模块自动发送8个40KHz的方波，自动检测是否有信号返回；\n3.有信号返回，通过IO输出一高电平，高电平持续的时间就是超声波从发射到返回的时间．测试距离=(高电平时间*声速(340m/s))/2;\npulseIn函数用于读取引脚脉冲的时间长度，脉冲可以是HIGH或LOW。如果是HIGH，函数将先等引脚变为高电平，然后开始计时，一直到变为低电平为止。返回脉冲持续的时间长短, 单位为ms。如果超时还没有读到的话, 将返回0。\n\nDemo:\n\n发一个10ms的高脉冲去触发TrigPin\n\n``` c\ndigitalWrite(TrigPin, LOW);\ndelayMicroseconds(2); //使发出发出超声波信号接口低电平2μs\ndigitalWrite(TrigPin, HIGH);\ndelayMicroseconds(10); //使发出发出超声波信号接口高电平10μs，这里是至少10μs\ndigitalWrite(TrigPin, LOW); //保持发出超声波信号接口低电平\n```\n\n####距离换算\n\n* cm = pulseIn(EchoPin, HIGH) / 58.0; //算成厘米\n* cm = (int(cm * 100.0)) / 100.0; //保留两位小数\n\n原理理解以后 尽量使用arduino官方推荐的SR04超声波传感器类库\n\n###读出脉冲时间 \n\n``` c\nint distance = pulseIn(inputPin, HIGH);\ndistance= distance/58; // 将脉冲时间转化为距离（单位：厘米）\n```\n","mtime":1389079646000,"source":"_posts/2013-06-09-guan-yu-hc-sr04-chao-sheng-bo-chuan-gan-qi.markdown"},"i1k2eeqwv3kv4pn1":{"_id":"i1k2eeqwv3kv4pn1","content":"title: 为什么用Cmake？\ndate: 2014-01-09 09:12:19\ntags: [Linux,MySQL]\n---\n\n>mysql版本5.5以上编译安装时需要用到软件cmake，cmake特性是独立于源码编译，编译工作可以在另外一个目录中而非源码目录中进行，好处是可以保证源码目录不受任何一次编译的影响。\n\n```\n[pi@raspi ~]# wget http://www.cmake.org/files/v2.8/cmake-2.8.11.2.tar.gz\n[pi@raspi ~]# tar zxvf cmake-2.8.11.2.tar.gz\n[pi@raspi ~]# cd  cmake-2.8.11.2\n[pi@raspi ~]# ./bootstrap\n[pi@raspi ~]# make && make install\n```\n\n[Get MySQL5.6.15](http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.15.tar.gz)\n\n``` shell\ncmake -DCMAKE_INSTALL_PREFIX=/opt/mysql -DMYSQL_UNIX_ADDR=/tmp/mysql.sock -DDEFAULT_CHARSET=utf8 \\\n-DDEFAULT_COLLATION=utf8_general_ci  -DWITH_EXTRA_CHARSETS=all -DWITH_INNOBASE_STORAGE_ENGINE=1 \\\n-DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_PERFSCHEMA_STORAGE_ENGINE=1 \\\n-DWITH_SSL=yes  -DENABLED_LOCAL_INFILE=1\n```\n<!-- more -->\n### Setup after Installed\n\n```\nchown -R root.mysql /opt/mysql/ \nchown -R mysql.mysql /opt/mysql/data/\n```\n\n### Init Database\n\n```\n/opt/mysql/scripts/mysql_install_db --user=mysql --basedir=/opt/mysql/ --datadir=/opt/mysql/data/\ncp /opt/mysql/support-files/my-default.cnf /etc/my.cnf\n```\n\n### Start running\n\n`/opt/mysql/bin/mysqld_safe & `\n\n##cmake编译参数详解：\n\n```\nhttp://dev.mysql.com/doc/refman/5.6/en/source-configuration-options.html\n-DCMAKE_INSTALL_PREFIX=dir_name  ：用于指定安装目录\n-DWITH_INNOBASE_STORAGE_ENGINE=1\n-DWITH_ARCHIVE_STORAGE_ENGINE=1\n-DWITH_BLACKHOLE_STORAGE_ENGINE=1\n-DWITH_PERFSCHEMA_STORAGE_ENGINE=1  ：常用存储引擎参数设置\n\n-DDEFAULT_CHARSET=charset_name\nThe server character set. By default, MySQL uses the latin1 (cp1252 West European) character set.\ncharset_name may be one of binary, armscii8, ascii, big5, cp1250, cp1251, cp1256, \ncp1257, cp850, cp852, cp866, cp932, dec8, eucjpms, euckr, gb2312, gbk, geostd8, greek, \nhebrew, hp8, keybcs2, koi8r, koi8u, latin1, latin2, latin5, latin7, macce, macroman, sjis, \nswe7, tis620, ucs2, ujis, utf8, utf8mb4, utf16, utf16le, utf32. \nThe permissible character sets are listed in the cmake/character_sets.cmake file as the value of CHARSETS_AVAILABLE.\n-DENABLED_LOCAL_INFILE=bool  ：bool值表示（1表示允许该功能，0表示没有改功能）\n \n-DMYSQL_UNIX_ADDR=file_name\nThe Unix socket file path on which the server listens for socket connections. \nThis must be an absolute path name. The default is /tmp/mysql.sock.\n```\n\n\n","mtime":1389230869000,"source":"_posts/why-used-cmake.md"},"sf85levmorvr9rmr":{"_id":"sf85levmorvr9rmr","content":"title: MYSQL ERROR 1372 (HY000)\ndate: 2014-01-09 10:46:42\ntags: MySQL\n---\n\n```\nGRANT ALL PRIVILEGES ON KETTLE_DEMO.* TO 'dba'@'%' IDENTIFIED BY PASSWORD 'dba';\nERROR 1372 (HY000): Password hash should be a 41-digit hexadecimal number\n```\n\n### fix\n\n```\nmysql> select password('dba');\n+-------------------------------------------+\n| password('dba')                           |\n+-------------------------------------------+\n| *** |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n\nGRANT ALL PRIVILEGES ON KETTLE_DEMO.* TO 'dba'@'%' IDENTIFIED BY PASSWORD '***';\nQuery OK, 0 rows affected (0.00 sec)\n```\n","mtime":1389235786000,"source":"_posts/mysql-error-1372-(hy000).md"},"0f5swhv61p58cscc":{"_id":"0f5swhv61p58cscc","content":"title: \"MySQL Note\"\ndate: 2010-05-23 23:43\ncomments: true\ncategories: MySQL\ntags: MySQL\n---\n\n##Select查询细节：\n###【匹配多个字符】\n`SELECT __ FROM __ WHERE ___ LIKE 'Smith% Corp.'`\n####Smith Corp. Smithson Corp ............  %通配符可以匹配0个或多个字符\n###【匹配单个字符】\n`SELECT __ FROM __ WHERE ___ LIKE 'Smiths_n Corp.'`\n####Smithson Smithsen\n###【以上模式的组合使用】\n####'Smiths_n %'\n###【转义字符】\n比如搜索“A%BC”开始的产品   `'A$%BC%' ESCAPE '$'`\n###【判断null】\n不能使用=来判断 IS NULL  IS NOT NULL\n###【NOT判断】\n`AND NOT SALES < 1500 不小于1500的`\n\n###【索引使用情况】\n* `Handler_read_key` 如果索引正在工作 这个值会很高\n* `Handler_read_rnd_next` 值如果高 证明查询运行低效\n<!-- more -->\n###【索引缓存优化】\n* `Key_read_requests` 从缓存中读取索引的次数\n* `Key_reads` 从硬盘中读取索引的请求次数\n* [my.cnf] `key_buffer_size = 256M` 只缓存索引键\n或者直接修改 `SET GLOBAL key_buffer_size = 256M`\n\n###【表缓存优化】\n* `Open_tables`  当前打开表的缓存数 flush tables会关闭一些当前没有使用的表缓存\n* `Opened_file`s 曾经打开过的表缓存数 flush tables 不会改变大小\n* `[my.cnf]  table_open_cache = 128` #这个值与系统的`max_connections`有关\n* `SET GLOBAL table_open_cache = 12`8\n\n###【innodb的优化设置】\n* `innodb_buffer_pool_size` #同时为数据块和索引块做缓存 和oracle一样 值越高 IO访问就越少 建议物理内存的80%\n* `innodb_buffer_pool_size = 64M`\n* innodb_flush_log_at_trx_commit  \n\n控制缓冲区中的数据写入到日志文件以及日志文件刷新磁盘的时机。\n* 0的时候 每秒一次的被写入到日志文件,并且对日志文件做向磁盘刷新的操作 但是一个事务提交不做任何操作。崩溃的时候数据库会丢失没有写到日志文件中的事务。最多丢失一秒钟的事务。最不安全 效率最高。\n* 1的时候 每个事务提交的时候 日志缓冲被写到日志文件 并且对日志文件做向磁盘刷新的操作。默认。每个事务提交的时候都会从log buffer写到日志文件 实际刷新磁盘 有性能上一定消耗。\n* 2的时候 每个事务提交时 日志缓冲被写到日志文件 但不对日志文件做向磁盘刷新的操作。没有刷新磁盘，但已经写入到日志文件，只要操作系统没有崩溃，那么并没有丢失数据，比0安全。\n* `innodb_additional_mem_pool_size`  状态值怎么查？ status\n* Innodb引擎用来储存引擎数据库结构和其他内部数据结构的内存池的大小，默认1M。应用程序里的表越多就应该分配越多的内存，如果innodb用光了这个内存就会向系统内存要。并且写入警告日志。不要太大内存 16,足以。\n`innodb_lock_wait_timeout`\n\n自动监测行锁导致的死锁并进行相应的处理，但是不能对表锁导致的死锁进行自动监测。参数主要是被用于在出现类似情况的时候等待指定的时间后回滚，默认是50秒。\n`innodb_support_xa`\n是否支持分布式事务 默认是1或ON 如果应用中不使用分布式事务就关闭该参数 减少磁盘刷新的次数并获得innodb性能。\n`innodb_log_buffer_size`\n日志缓存的大小 默认的设置在中等强度写入负载以及较短事务的情况下，一般可以满足服务器的性能要求。如果更新操作峰值或者负载较大就应该加大这个值。8-16M即可。\n`innodb_log_file_size`\n日志组log group中每个日志文件的大小 在高写入负载尤其是大数据集的情况下很重要。这个值越大性能就越高，副作用是恢复时时间会加长。`默认是5M`。 \nJavaeye推荐`innodb_log_file_size = 64M`\n####需要注意的是 修改完以后要STOP服务 接着删除原来的日志ib_logfile0和ib_logfile1，然后启动服务，看新日志的大小是否为设置的值。\n##整体性能分析报告\n\n```\nmysql> show engine innodb status \\G\ninnodb_file_per_table\n```\n\n取值为ON或者OFF。是否为每个table使用单独的数据文件保存。如果系统中表的个数不多，并且没有超大表，使用该参数可以使得各个表之间的 维护相对独立，有一定的好处。innodb_flush_method究竟应不应该使用O_DIRECT？\n####innodb_flush_method究竟应不应该使用O_DIRECT？ \n\n所有MySQL调优的建议都说，如果硬件没有预读功能，那么使用O_DIRECT将极大降低InnoDB的性能，因为O_DIRECT跳过了操作 系统的文件系统Disk Cache，让MySQL直接读写磁盘了。 \n\n但是在我的实践中来看，如果不使用O_DIRECT，操作系统被迫开辟大量的Disk Cache用于innodb的读写缓存，不但没有提高读写性能，反而造成读写性能急剧下降。而且buffer pool的数据缓存和操作系统Disk Cache缓存造成了Double buffer的浪费，显然从我这个实践来看，浪费得非常厉害。 \n\n说O_DIRECT造成MySQL直接读写磁盘造成得性能下降问题，我觉得完全是杞人忧天。因为从JavaEye的数据库监测来看，Innodb 的buffer pool命中率非常高，有98%以上，真正的磁盘操作是微乎其微的。为了1%的磁盘操作能够得到Disk Cache，而浪费了98%的double buffer内存空间，无论从性能上看，还是从内存资源的消耗来看，都是非常不明智的。 \n###【查询缓存 MySQL Query Cache】\n* 存储SELECT查村的文本以及相应结果作为缓存。\n* `have_query_cache`  是否配置高速缓存\n* `query_cache_size` 缓存大小\n* `query_cache_type` #0和OFF 缓存关闭； 1或者ON 缓存打开 使用SQL_NO_CACHE的SELECT除外；2或者demand 只有带SQL_CACHE的SELECT语句提供高速缓存。\n* `query_cache_limit` 单个查询能够使用的缓存区大小  如果超过就不使用cache了\n* `query_cache_min_res_unit` 单个存储块的内存分配大小 Qcache_queries_in_cache和Qcache_total_blocks的比例如果是1:2是正合适的，如果再大就需要调整了。\n* `Qcache_free_blocks` 查询缓存中的空闲内存块的数目\n* `Qcache_free_memory` 查询缓存中的空闲内存总数\n* `Qcache_hits` 缓存采样数数目\n* `Qcache_inserts` 被加入到缓存中的查询数目。\n* `Qcache_lowmem_prunes` 因为缺少内存而被从缓存中删除的查询数目。\n* `Qcache_not_cached` 没有被缓存的查询数目，由query_cache_type带来的。\n* `Qcache_queries_in_cache` 在缓存中已注册的查询数目。\n* `Qcache_total_blocks` 查询缓存中的块的总数目。\n\n###【mysqld读取my.cnf的顺序】\n* 第一搜，首先读取`/etc/my.cnf`，多实例这个配置 文件不会存在。\n* 第二搜，`$datadir/my.cnf`，在data目录下寻找此配置文件。\n* 第三搜，`defaultfile=/path/my.cnf` 通常写在命令行上，mysqld_safe defaultfile=/tmp/my.cnf &等执行。\n* 第四搜，`~/my.cnf` 当前用户下的配置文件。\n","mtime":1389236527000,"source":"_posts/mysql-note.markdown"},"kiljpxw4u6lyfb0u":{"_id":"kiljpxw4u6lyfb0u","content":"title: \"MYSQL Replication学习总结\"\ncategories: MySQL\nmonth: 12\nyear: 2011\ntags: MySQL\n---\n\n>复制的本质：将DDL DML(除查询以外)的动作记录在slave上replay。\n##一个slave只能有一个master\n\n###grant： replication slave\n\n###获取快照：\n```\nflush tables with read lock; show master status; \ntar -xcvf __.tar.gz /data ; scp ; unlock tables；\n```\n\n###slave的关键启动项： --skip--slave--start\n```\nCHANGE MASTER TO\nMASTER_HOST = '192.168.200.200',\n\t    MASTER_PORT = 3306,\n\t    MASTER_USER = 'rep1',\n\t    MASTER_PASSWORD = '12345',\n\t    MASTER_LOG_FILE = 'mysql-bin.000001',\n\t    MASTER_LOG_POS = 109;\n\nstart slave;\n```\n<!-- more -->\n\n###配置相关：\n```\nlog-slave-updates = 1 #slave上也打开中继日志 \nmaster-connect-retry = 3 # 断开连接重连的时间间隔\nread-only = 1 # 只读模式开关\n```\n###主从同步维护\n```\nmaster：\n----------flush tables with read lock;\n----------show master status;\nslave:\n----------select master_pos_wait('mysql-bin.00001','975');\n-- 这个函数会让slave达到指定的偏移量后返回0 返回-1表示超时\nmaster:\n----------unlock tables;\n```\n\n###大文本传输[要注意的是master和slave上的这个设置必须完全一样 否则会有误差]\n```\nshow variables like 'max_allowed_packet';\nset @@global.max_allowed_packet = 1024*1024*16\n```\n\n\n###多主复制时自增长列冲突的问题。\n```\nauto_increment_increment = 10\nauto_increment_offset = 1\n```\n#####从1开始 每次增加10\n查看 \n`show variables like 'auto_inc%';`\n\n###复制进度，当前执行SQL进程时间戳和系统时间之间的差距。 Time 单位是秒 (show processlist \\G);\n\n* 复制的模式：基于语句和基于行\n* 向后兼容：新版本的MYSQL可以做旧版本MYSQL的slave\n* IO线程和SQL线程是独立分开的。\n* slave上的复制是串行的，master上的并行更新操作不能在slave上并行进行。\n\n###单独STOP一个进程： STOP slave IO_THREAD;\n```\n[my.cnf]\nsync_binlog = 1 #将二进制日志的内容同步于磁盘之上。\ninnodb的前提是 innodb_flush_logs_at_trx_commit = 1\n```\n\n###如果不想在server崩溃后表被破坏，可以使用innodb，如果确定使用innodb的话，master上要设置相关参数\n```\n[my.cnf]\ninnodb_flush_logs_at_trx_commit = 1\ninnodb_support_xa = 1\ninnodb_safe_binlog = 1\n```\n\n###M-S差距越来越大 IO进程会产生很多中继日志。复制完的sql语句是否立即从中继日志中清除，1表示立即清除\n`relay-log-purge=1`\n\n\n###基于命令的复制就是语句复制 逻辑复制的一种 5.0之前的版本都支持。\n* `[好处]`实现比较简单， 节省带宽 上GB的数据查询在日志中只有几个字节的长度。 有binlog生成，而mysqlbinlog是使用命令复制的最佳工具。\n* `[劣势]`M-S上执行的系统时间会有不同 比如current_user()的查询会不同，存储过程 触发器在基于命令复制下也会有问题。修改必须是串行的，需要大量特殊代码。\n\n>ROW行复制 是5.1版本独有的,将实际的数据更改记录到二进制日志中。\n* [好]正确复制\n* [缺陷]日志会变得很大 不能用mysqlbinlog检查日志\n\n###基于行的复制可以高效的复制数据 因为slave不用replay master上的数据查询。\n\n>[比如]UPDATE动作 基于行复制 代价就会很高 逐行修改 每一行的修改都会写入二进制日志中  基于命令就会很小 。\n\n`5.1的MYSQL`会自动切换命令复制和行复制模式，默认是基于命令复制，当探测到当前事件不能使用命令正确复制的时候就切换到行模式下。\n可以通过binlog_format控制复制模式。\n\n###基于行的复制事件在二进制日志里很难进行时间点恢复，但不等于不能做到。\n```\n[files]\nmysql-bin.index 每一行包含了二进制日志文件的文件名\nmysql-relay-bin.index 中继日志 格式同上。\nmaster.info slave连接master的所有信息都在这里 文本文件 一行一条内容。\nrelat-log.info slave上当前的二进制日志和中继日志的坐标\n问题：这些过程都不是同步的 过程中失去电力或其他原因 数据将会不完整。\n\n[标准设置]\nlog_bin = mysql-bin #safe的 不要以主机名来命名二进制日志文件\nlog_bin_index = mysql-bin.index\nrelay_log = mysql-relay-bin\nrelay_log_index = mysql-relay-bin.index\n\nlog_slave_updates = 1 将一台slave变成master\nserverID是为了防止无限循环而成的 建议将master的ID设置城10 因为1是默认。\n\n复制的过滤设置\n控制二进制日志的生成： binlog_do_db binlog_ignore_db \n默认不需要开启  根据自己的需求来设置。比如忽略某一个库的二进制日志生成。\n\nreplicate_do_db 复制特定的库\nreplicate_do_table 复制指定的表\nreplicate_ignore_db 忽略某个库\nreplicate_ignore_table 忽略某张表\nreplicate_rewrite_db 重写某一个库 replicate-rewrite-db=\"master_db->master_db_foo\"\nreplicate_wild_do_table = mysql.% 通配符下的 所有mysql库的表被复制\nreplicate_wild_ignore_table 同上  是忽略。\n\n[禁止权限被复制]\nreplicate_ignore_table = mysql.columns_priv\nreplicate_ignore_table = mysql.db\nreplicate_ignore_table = mysql.host\nreplicate_ignore_table = mysql.procs_priv\nreplicate_ignore_table = mysql.tables_priv\nreplicate_ignore_table = mysql.user\n```\n##被动模式下的主主复制 ： 容错 高可用性\n>google的补丁： code.google.com/p/mysql-master-master\n\n分发master 提供master上的binlog\n\nignore要慎用 比如ignore一个test库 但下面的操作就会麻烦\n```\nUSE TEST;\nUPDATE bbs.emp SET uname = 'aaa' where uid = 10;\n这个update的动作就会被省略。\n```\n如果带宽有限制：slave上激活 slave_compressed_protocol 文本在传输时就会压缩 代价是消耗CPU。\n","mtime":1275264630000,"source":"_posts/mysql-replication.markdown"}}}